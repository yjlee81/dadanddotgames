const gameBoard = document.getElementById('game-board');
const scoreDisplay = document.getElementById('score');
const bestScoreDisplay = document.getElementById('best-score');
const restartButton = document.getElementById('restart-button');
const modal = document.getElementById('modal');
const difficultyButtons = document.querySelectorAll('.difficulty-button');
const mergeSound = document.getElementById('mergeSound');

let grid = [];
let score = 0;
let bestScore = 0;
let gameStarted = false;
let difficultyLevel = 'normal';
let currentGameMaxLevel = 1;
let tileIdCounter = 0; // ÌÉÄÏùº IDÎ•º ÏúÑÌïú Ïπ¥Ïö¥ÌÑ∞ Ï∂îÍ∞Ä
let nextTileValue = 2; // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï

// Initialize the grid with null values
function initGrid() {
  grid = [];
  for (let row = 0; row < 4; row++) {
    grid[row] = [];
    for (let col = 0; col < 4; col++) {
      grid[row][col] = null;
    }
  }
}

function init() {
  initGrid();
  score = 0;
  currentGameMaxLevel = 1;
  scoreDisplay.innerText = score;
  updateBestScoreDisplay();
  gameBoard.innerHTML = '';
  createPlaceholders();
  addStartingTiles();
  updateBoard();
  updateNextTileDisplay();
}

function createPlaceholders() {
  // Create placeholders for the grid background
  for (let row = 0; row < 4; row++) {
    for (let col = 0; col < 4; col++) {
      const placeholder = document.createElement('div');
      placeholder.classList.add('tile-placeholder');
      placeholder.style.left = (col * 110 + 10) + 'px';
      placeholder.style.top = (row * 110 + 10) + 'px';
      gameBoard.appendChild(placeholder);
    }
  }
}

function addStartingTiles() {
  let startingTiles = 2;
  if (difficultyLevel === 'easy') startingTiles = 4;
  if (difficultyLevel === 'hard') startingTiles = 2;
  if (difficultyLevel === 'expert') startingTiles = 1;
  if (difficultyLevel === 'master') startingTiles = 1;

  for (let i = 0; i < startingTiles; i++) {
    addNewTile();
  }
}

function addNewTile() {
  const emptyPositions = [];
  for (let row = 0; row < 4; row++) {
    for (let col = 0; col < 4; col++) {
      if (!grid[row][col]) {
        emptyPositions.push({ row, col });
      }
    }
  }
  if (emptyPositions.length === 0) return;
  const randomPos = emptyPositions[Math.floor(Math.random() * emptyPositions.length)];
  
  // Îã§Ïùå ÌÉÄÏùº Í∞í ÏÑ§Ï†ï: Lv.1, Lv.2, Lv.3 Ï§ë ÌïòÎÇò
  const possibleValues = [2, 4, 8];
  const newValue = nextTileValue;
  grid[randomPos.row][randomPos.col] = {
    value: newValue,
    isNew: true,
    merged: false,
    id: tileIdCounter++
  };

  // Îã§ÏùåÏóê ÎÇòÏò¨ ÌÉÄÏùº Í∞í ÏÑ§Ï†ï
  nextTileValue = possibleValues[Math.floor(Math.random() * possibleValues.length)];
  updateNextTileDisplay();
}

function updateNextTileDisplay() {
  const nextTileElement = document.querySelector('.next-tile');
  const nextTileLevelElement = document.querySelector('.tile-level');
  const level = Math.log2(nextTileValue);
  const emojis = ["ü•ö", "üê£", "üê•", "üê§", "ü¶Ö", "ü¶â", "ü¶á", "üê≤", "üêâ", "üåü", "üëë"];
  
  // ÌÉÄÏùº ÎØ∏Î¶¨Î≥¥Í∏∞ ÏóÖÎç∞Ïù¥Ìä∏
  const previewElement = nextTileElement.querySelector('.tile-preview');
  previewElement.textContent = emojis[level - 1];
  
  // Î†àÎ≤® ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
  nextTileLevelElement.textContent = `Lv.${level}`;
  
  // Î∞∞Í≤ΩÏÉâ ÏóÖÎç∞Ïù¥Ìä∏
  nextTileElement.setAttribute('data-level', level);
  nextTileElement.style.backgroundColor = getTileColor(nextTileValue);
}

function getTileColor(value) {
  switch (value) {
    case 2: return '#FFF5E6';
    case 4: return '#FFE4CC';
    case 8: return '#FFD4B3';
    case 16: return '#FFC299';
    case 32: return '#FFB380';
    case 64: return '#FFA366';
    case 128: return '#FF944D';
    case 256: return '#FF8533';
    case 512: return '#FF751A';
    case 1024: return '#FF6600';
    case 2048: return '#FF4D00';
    default: return '#CCC0B3';
  }
}

// Ï¥àÍ∏∞Ìôî Ïãú Îã§Ïùå ÌÉÄÏùº ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
updateNextTileDisplay();

function updateBoard() {
    const currentTileIds = new Set();

    if (!gameStarted) return;

    for (let row = 0; row < 4; row++) {
        for (let col = 0; col < 4; col++) {
            if (grid[row][col]) {
                const id = grid[row][col].id;
                const value = grid[row][col].value;
                currentTileIds.add(id);

                let tile = document.querySelector(`.tile[data-id="${id}"]`);

                if (!tile) {
                    // ÏÉàÎ°úÏö¥ ÌÉÄÏùº ÏÉùÏÑ±
                    tile = document.createElement('div');
                    tile.classList.add('tile', `tile-${value}`);
                    tile.setAttribute('data-id', id);

                    const level = Math.log2(value);
                    if (level === 11) {
                        tile.innerHTML = '<span class="level-text">Master</span>';
                    } else {
                        tile.innerHTML = `<span class="level-text">Lv.${level}</span>`;
                    }

                    if (grid[row][col].isNew) {
                        tile.classList.add('new-tile');
                        grid[row][col].isNew = false;
                    }

                    gameBoard.appendChild(tile);
                }

                // ÌÉÄÏùº ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
                const targetLeft = (col * 110 + 10) + 'px';
                const targetTop = (row * 110 + 10) + 'px';

                // Ïû¨ ÏúÑÏπòÏôÄ Î™©Ìëú ÏúÑÏπòÍ∞Ä Îã§Î•∏ Í≤ΩÏö∞ÏóêÎßå Ïù¥Îèô ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
                if (tile.style.left !== targetLeft || tile.style.top !== targetTop) {
                    tile.classList.add('moving');
                }

                tile.style.left = targetLeft;
                tile.style.top = targetTop;

                // Ïù¥ÎèôÏù¥ ÏôÑÎ£åÎêú ÌõÑ moving ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
                setTimeout(() => {
                    tile.classList.remove('moving');
                }, 150);

                if (grid[row][col].merged) {
                    tile.classList.add('merge');
                    createParticles(col * 110 + 60, row * 110 + 60);
                    grid[row][col].merged = false;
                }
            }
        }
    }

    // Í∑∏Î¶¨ÎìúÏóê ÏóÜÎäî ÌÉÄÏùº Ï†úÍ±∞
    const tiles = document.querySelectorAll('.tile');
    tiles.forEach(tile => {
        const id = parseInt(tile.getAttribute('data-id'));
        if (!currentTileIds.has(id)) {
            tile.style.opacity = '0';
            tile.style.transform = 'scale(0.8)';
            setTimeout(() => {
                if (tile.parentNode === gameBoard) {
                    gameBoard.removeChild(tile);
                }
            }, 150);
        }
    });
}

function moveTiles(direction) {
  let moved = false;

  for (let i = 0; i < 4; i++) {
    let line = [];
    for (let j = 0; j < 4; j++) {
      let row = direction === 'ArrowUp' || direction === 'ArrowDown' ? j : i;
      let col = direction === 'ArrowUp' || direction === 'ArrowDown' ? i : j;
      if (direction === 'ArrowDown') row = 3 - j;
      if (direction === 'ArrowRight') col = 3 - j;
      let cell = grid[row][col];
      if (cell) {
        line.push({ ...cell });
      }
    }

    let mergedLine = [];
    let skip = false;
    for (let k = 0; k < line.length; k++) {
      if (skip) {
        skip = false;
        continue;
      }
      if (line[k + 1] && line[k].value === line[k + 1].value) {
        let newValue = line[k].value * 2;
        
        // Ï†êÏàò Í≥ÑÏÇ∞ÏùÑ Îã®ÏàúÌôî
        let points = Math.log2(newValue) - 1; // 2 -> 1Ï†ê, 4 -> 2Ï†ê, 8 -> 3Ï†ê, 16 -> 4Ï†ê
        score += points;

        mergedLine.push({
          value: newValue,
          merged: true,
          isNew: false,
          id: tileIdCounter++ // Î≥ëÌï©Îêú ÌÉÄÏùºÏóê ÏÉàÎ°úÏö¥ ID Ìï†Îãπ
        });
        if (mergeSound) {
          mergeSound.currentTime = 0; // ÏÜåÎ¶¨Î•º Ï≤òÏùåÎ∂ÄÌÑ∞ Ïû¨ÏÉù
          mergeSound.play().catch(e => console.log('Sound play failed:', e));
        }
        skip = true;
      } else {
        mergedLine.push({
          value: line[k].value,
          merged: false,
          isNew: false,
          id: line[k].id
        });
      }
    }

    while (mergedLine.length < 4) {
      mergedLine.push(null);
    }

    for (let j = 0; j < 4; j++) {
      let row = direction === 'ArrowUp' || direction === 'ArrowDown' ? j : i;
      let col = direction === 'ArrowUp' || direction === 'ArrowDown' ? i : j;
      if (direction === 'ArrowDown') row = 3 - j;
      if (direction === 'ArrowRight') col = 3 - j;

      const newCell = mergedLine[j];
      const oldCell = grid[row][col];

      if (oldCell && (!newCell || oldCell.id !== newCell.id || oldCell.value !== newCell.value)) {
        moved = true;
      }

      grid[row][col] = newCell;
    }
  }

  if (moved) {
    addNewTile();
    updateBoard();
    scoreDisplay.innerText = score;
    updateBestScore();

    if (isGameOver()) {
      setTimeout(() => {
        alert('Game Over!');
      }, 300);
    }
  }
}


function isGameOver() {
  for (let row = 0; row < 4; row++) {
    for (let col = 0; col < 4; col++) {
      if (!grid[row][col]) return false;
      let currentValue = grid[row][col].value;
      if (
        (col < 3 && grid[row][col + 1] && grid[row][col + 1].value === currentValue) ||
        (row < 3 && grid[row + 1][col] && grid[row + 1][col].value === currentValue)
      ) {
        return false;
      }
    }
  }
  return true;
}

function updateBestScore() {
  const bestRecord = getBestScore();
  if (score > bestRecord.score) {
    // ÌòÑÏû¨ Í≤åÏûÑÏùò ÏµúÍ≥† Î†àÎ≤® Í≥ÑÏÇ∞
    let maxLevel = currentGameMaxLevel;  // ÌòÑÏû¨ Í≤åÏûÑÏùò ÏµúÍ≥† Î†àÎ≤® ÏÇ¨Ïö©
    
    // ÏµúÍ≥† Í∏∞Î°ù Ï†ÄÏû•
    const newRecord = {
      score: score,
      level: maxLevel
    };
    localStorage.setItem('bestScore', JSON.stringify(newRecord));
    updateBestScoreDisplay(newRecord);
  }
}

function getBestScore() {
  try {
    const savedRecord = localStorage.getItem('bestScore');
    if (!savedRecord) return { score: 0, level: 0 };
    const record = JSON.parse(savedRecord);
    return {
      score: Number(record.score) || 0,
      level: Number(record.level) || 0
    };
  } catch (e) {
    console.error('Error loading best score:', e);
    return { score: 0, level: 0 };
  }
}

function updateBestScoreDisplay(record = getBestScore()) {
  if (!record || record.score === 0) {
    bestScoreDisplay.innerHTML = '- <span class="best-level">(-)</span>';
  } else {
    bestScoreDisplay.innerHTML = `${record.score} <span class="best-level">(Lv.${record.level})</span>`;
  }
}

document.addEventListener('keydown', event => {
  if (!gameStarted) return;
  if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
    moveTiles(event.key);
  }
});

restartButton.addEventListener('click', () => {
  init();
});

// Touch controls
let touchStartX;
let touchStartY;

document.addEventListener('touchstart', function(e) {
  if (!gameStarted) return;
  touchStartX = e.changedTouches[0].screenX;
  touchStartY = e.changedTouches[0].screenY;
});

document.addEventListener('touchend', function(e) {
  if (!gameStarted) return;
  let touchEndX = e.changedTouches[0].screenX;
  let touchEndY = e.changedTouches[0].screenY;
  handleGesture(touchStartX, touchStartY, touchEndX, touchEndY);
});

function handleGesture(startX, startY, endX, endY) {
  let dx = endX - startX;
  let dy = endY - startY;
  if (Math.abs(dx) > Math.abs(dy)) {
    if (dx > 30) {
      moveTiles('ArrowRight');
    } else if (dx < -30) {
      moveTiles('ArrowLeft');
    }
  } else {
    if (dy > 30) {
      moveTiles('ArrowDown');
    } else if (dy < -30) {
      moveTiles('ArrowUp');
    }
  }
}

// Particle effects
function createParticles(x, y) {
  for (let i = 0; i < 10; i++) {
    const particle = document.createElement('div');
    particle.classList.add('particle');
    particle.style.left = x + 'px';
    particle.style.top = y + 'px';
    particle.style.width = particle.style.height = Math.random() * 10 + 'px';
    particle.style.background = 'rgba(255, 255, 255,' + Math.random() + ')';
    gameBoard.appendChild(particle);

    // Remove particle after animation
    particle.addEventListener('animationend', () => {
      gameBoard.removeChild(particle);
    });
  }
}

// Show the modal on load
window.onload = () => {
    modal.style.display = 'block';
    initSound();
  };

// Îã§Íµ≠Ïñ¥ ÏßÄÏõêÏùÑ ÏúÑÌïú ÌÖçÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞
const translations = {
  en: {
    title: "Monster Master",
    currentScore: "Score",
    bestScore: "Best",
    restart: "Restart",
    welcome: "How to Play",
    instructions: "Use arrow keys to merge monsters and reach the master level!",
    startGame: "Start Game ‚èé"
  },
  ko: {
    title: "Monster Master",
    currentScore: "ÌòÑÏû¨ Ï†êÏàò",
    bestScore: "ÏµúÍ≥†Ï†êÏàò",
    restart: "Îã§ÏãúÌïòÍ∏∞",
    welcome: "Í≤åÏûÑÎ∞©Î≤ï",
    instructions: "ÌÇ§Î•º Ïù¥Ïö©Ìï¥ Î™¨Ïä§ÌÑ∞Î•º Ìï©Ï≥ê ÎßàÏä§ÌÑ∞ Î†àÎ≤®Ïóê ÎèÑÎã¨ÌïòÏÑ∏Ïöî!",
    startGame: "Í≤åÏûÑ ÏãúÏûë ‚èé"
  },
  ja: {
    title: "Monster Master",
    currentScore: "„Çπ„Ç≥„Ç¢",
    bestScore: "„Éô„Çπ„Éà",
    restart: "„É™„Çπ„Çø„Éº„Éà",
    welcome: "ÈÅä„Å≥Êñπ",
    instructions: "„Ç≠„Éº„Çí‰Ωø„Å£„Å¶„É¢„É≥„Çπ„Çø„Éº„Çí„Éû„Éº„Ç∏„Åó„Å¶„Éû„Çπ„Çø„Éº„É¨„Éô„É´„Å´Âà∞ÈÅî„Åó„Çà„ÅÜÔºÅ",
    startGame: "„Ç≤„Éº„É†„Çπ„Çø„Éº„Éà ‚èé"
  },
  zh: {
    title: "Monster Master",
    currentScore: "ÂΩìÂâçÂàÜÊï∞",
    bestScore: "ÊúÄÈ´òÂàÜ",
    restart: "ÈáçÊñ∞ÂºÄÂßã",
    welcome: "Ê∏∏ÊàèÊñπÊ≥ï",
    instructions: "‰ΩøÁî®ÊñπÂêëÈîÆÂêàÂπ∂ÊÄ™Áâ©ÔºåËææÂà∞Â§ßÂ∏àÁ∫ßÂà´ÔºÅ",
    startGame: "ÂºÄÂßãÊ∏∏Êàè ‚èé"
  }
};

// Function to update translations based on selected language
function updateTranslations(lang) {
  document.querySelectorAll("[data-i18n]").forEach(element => {
    const key = element.getAttribute("data-i18n");
    element.textContent = translations[lang][key];
  });
}

// Event listener for language selection
document.getElementById("language-select").addEventListener("change", (event) => {
  const selectedLang = event.target.value;
  updateTranslations(selectedLang);
});

// Initialize with default language
updateTranslations("ko");

// Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω Ìï®Ïàò
function changeLanguage(lang) {
    const elements = document.querySelectorAll('[data-i18n]');
    elements.forEach(element => {
        const key = element.getAttribute('data-i18n');
        if (translations[lang] && translations[lang][key]) {
            element.textContent = translations[lang][key];
        }
    });
    localStorage.setItem('preferred-language', lang);
}

// Ïñ¥ ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
document.getElementById('language-select').addEventListener('change', (e) => {
    changeLanguage(e.target.value);
});

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï†ÄÏû•Îêú Ïñ∏Ïñ¥ ÏÑ§Ï†ï Ï†ÅÏö©
window.addEventListener('load', () => {
    const savedLanguage = localStorage.getItem('preferred-language') || 'en';
    document.getElementById('language-select').value = savedLanguage;
    changeLanguage(savedLanguage);
});

// Í≤åÏûÑ ÏãúÏûë Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Î¶¨ÎÑà
document.getElementById('start-button').addEventListener('click', () => {
    document.getElementById('game-guide').style.display = 'none';
    startGame();
});

document.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && modal.style.display !== 'none') {
        startGame();
    }
});

function startGame() {
    gameStarted = true;
    difficultyLevel = 'normal'; // Í∏∞Î≥∏ ÎÇúÏù¥ÎèÑ ÏÑ§Ï†ï
    init();
}

// Î∞©Ìñ•ÌÇ§ UI ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
document.querySelectorAll('.arrow-key').forEach(key => {
  key.addEventListener('click', () => {
    if (!gameStarted) return;
    
    const direction = key.classList.contains('up') ? 'ArrowUp'
      : key.classList.contains('down') ? 'ArrowDown'
      : key.classList.contains('left') ? 'ArrowLeft'
      : 'ArrowRight';
      
    moveTiles(direction);
  });
});

// Î†àÎ≤® Îã¨ÏÑ± ÏïåÎ¶ºÏùÑ ÏúÑÌïú Ìï®Ïàò Ï∂îÍ∞Ä
function showLevelAchievement(level) {
    const achievementModal = document.createElement('div');
    achievementModal.className = 'achievement-modal';
    
    const content = document.createElement('div');
    content.className = 'achievement-content';
    
    const emoji = document.createElement('div');
    emoji.className = 'achievement-emoji';
    // Î†àÎ≤®Ïóê Îî∞Î•∏ Ïù¥Î™®ÏßÄ ÏÑ§Ï†ï
    const emojis = ["ü•ö", "üê£", "üê•", "üê§", "ü¶Ö", "ü¶â", "ü¶á", "üê≤", "üêâ", "üåü", "üëë"];
    emoji.textContent = emojis[level - 1];
    
    const text = document.createElement('div');
    text.className = 'achievement-text';
    text.textContent = `Level ${level} ${level === 11 ? 'Master' : 'Monster'}!`;
    
    content.appendChild(emoji);
    content.appendChild(text);
    achievementModal.appendChild(content);
    document.body.appendChild(achievementModal);
    
    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
    setTimeout(() => achievementModal.classList.add('show'), 100);
    
    // 1.5Ï¥à ÌõÑ Ï†úÍ±∞
    setTimeout(() => {
        achievementModal.classList.remove('show');
        setTimeout(() => achievementModal.remove(), 300);
    }, 1500);
}

// Í≤åÏûÑ ÏãúÏûë Ïãú Ïö¥Îìú Ï¥àÍ∏∞Ìôî Ìï®Ïàò Ï∂îÍ∞Ä
function initSound() {
  // iOS Îì± Î™®Î∞îÏùºÏóêÏÑú ÏÜåÎ¶¨ Ïû¨ÏÉùÏùÑ ÏúÑÌïú Ï≤òÎ¶¨
  document.addEventListener('touchstart', function() {
    if (mergeSound) {
      mergeSound.play().then(() => {
        mergeSound.pause();
        mergeSound.currentTime = 0;
      }).catch(e => console.log('Sound initialization failed:', e));
    }
  }, { once: true });
}

// Í≤åÏûÑ Í∞ÄÏù¥Îìú Í¥ÄÎ†® ÏöîÏÜå
const gameGuide = document.getElementById('game-guide');
const startButton = document.getElementById('start-button');

// ÏóîÌÑ∞ÌÇ§ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
document.addEventListener('keydown', function(event) {
    // Í≤åÏûÑ Í∞ÄÏù¥ÎìúÍ∞Ä ÌëúÏãúÎêòÏñ¥ ÏûàÏùÑ ÎïåÎßå ÏóîÌÑ∞ÌÇ§ ÎèôÏûë
    if (gameGuide.style.display !== 'none' && event.key === 'Enter') {
        startButton.click(); // ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞úÏÉù
    }
});

// ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
startButton.addEventListener('click', function() {
    gameGuide.style.display = 'none';
    startGame();
});

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú ÏãúÏûë Î≤ÑÌäºÏóê Ìè¨Ïª§Ïä§
window.addEventListener('load', function() {
    startButton.focus();
});